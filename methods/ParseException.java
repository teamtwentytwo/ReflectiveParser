public class ParseException extends Exception {
	int location;
	/**
	 * ParseException Constructor
	 * 
	 * @param location Location in the line the exception was thrown
	 */
	public ParseException(int location){
		this.location = location;
	}
	/**
	 * formatMessage method, that constructs the error mesage
	 * 
	 * @param input The original input given as a string
	 * @param stackTrace The stack trace generated by the exception, to extract message from
	 * @param verbose The state of verbose that gives determines whether error message is detailed or simple
	 * @return String The error message that is returned
	 */
	public String formatMessage(String input, String stackTrace, boolean verbose){
		int begin = stackTrace.indexOf(':');
		int end = stackTrace.indexOf('\n');
		//Extracting the simple error message from the stack trace
		String description = stackTrace.substring(begin + 2, end) + "at offSet" + location + "\n";
		String pointer = "";
		//Generating the location pointer based on the location variable given at construct time
		for (int i = 0; i < location; i++) {
			pointer = pointer + "-";	
		}
		pointer = pointer + "^\n";
		//Returning detailed message with original stack trace if verbose is on/true
		if (verbose){
			return (description + pointer + stackTrace);
		}else {
			return (description + pointer);
		}
	}
}
